{"ast":null,"code":"import _defineProperty from \"/home/newdevrising/dev/tutorials/fullstack-helsinki/part2/notes-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/newdevrising/dev/tutorials/fullstack-helsinki/part2/notes-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/newdevrising/dev/tutorials/fullstack-helsinki/part2/notes-app/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Note from \"./components/Note\";\n\nconst App = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        showAll = _useState4[0],\n        setShowAll = _useState4[1];\n\n  const importantNotes = notes.filter(note => note.important);\n\n  const _useState5 = useState(\"add note\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        note = _useState6[0],\n        setNote = _useState6[1];\n\n  useEffect(() => {\n    console.log(\"useEffect triggered this\");\n    axios.get(\"http://localhost:3001/notes\").then(res => {\n      console.log(res);\n      setNotes(res.data);\n    }).catch(err => console.log(err.message));\n  }, []);\n\n  const handleTextInput = e => {\n    setNote(e.target.value);\n  };\n\n  const generateNoteId = () => {\n    // insures unique ID by adding one to highest existing\n    return Math.max(...notes.map(note => note.id)) + 1;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newNote = {\n      content: note,\n      important: Math.random() > 0.5,\n      date: new Date(),\n      id: generateNoteId()\n    };\n    axios.post(\"http://localhost:3001/notes\", newNote).then(res => console.log(res)); // add to state\n\n    setNotes(notes.concat(newNote));\n  };\n\n  const showImportant = () => {\n    // only important notes displayed showAll is false. toggled by button\n    setShowAll(!showAll);\n  };\n\n  const toggleImportant = id => {\n    // find note by id\n    const note = notes.find(note => note.id === +id); // mod importance\n\n    const modNote = _objectSpread({}, note, {\n      important: !note.important\n    }); // repost to db\n    // console.log(note);\n    // console.log(modNote);\n\n\n    axios.put(\"http://localhost:3001/notes/\".concat(id), modNote).then(res => {\n      // insert modded note into state\n      console.log(res.data);\n      setNotes(notes.map(note => note.id === +id ? res.data : note));\n    });\n  };\n\n  const generalRender = noteArr => noteArr.map(({\n    content,\n    id,\n    date,\n    important\n  }) => React.createElement(Note, {\n    key: id,\n    content: content,\n    date: date,\n    important: important,\n    toggleImportant: toggleImportant,\n    id: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"button\", {\n    onClick: showImportant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, showAll ? \"Click to Show only important\" : \"Click to Show All\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onChange: handleTextInput,\n    type: \"text\",\n    value: note,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, showAll ? generalRender(notes) : generalRender(importantNotes)));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/newdevrising/dev/tutorials/fullstack-helsinki/part2/notes-app/src/App.js"],"names":["React","useState","useEffect","axios","Note","App","props","notes","setNotes","showAll","setShowAll","importantNotes","filter","note","important","setNote","console","log","get","then","res","data","catch","err","message","handleTextInput","e","target","value","generateNoteId","Math","max","map","id","handleSubmit","preventDefault","newNote","content","random","date","Date","post","concat","showImportant","toggleImportant","find","modNote","put","generalRender","noteArr"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Note from \"./components/Note\";\n\nconst App = props => {\n  const [notes, setNotes] = useState([]);\n  const [showAll, setShowAll] = useState(true);\n\n  const importantNotes = notes.filter(note => note.important);\n\n  const [note, setNote] = useState(\"add note\");\n\n  useEffect(() => {\n    console.log(\"useEffect triggered this\");\n    axios\n      .get(\"http://localhost:3001/notes\")\n      .then(res => {\n        console.log(res);\n        setNotes(res.data);\n      })\n      .catch(err => console.log(err.message));\n  }, []);\n\n  const handleTextInput = e => {\n    setNote(e.target.value);\n  };\n\n  const generateNoteId = () => {\n    // insures unique ID by adding one to highest existing\n    return Math.max(...notes.map(note => note.id)) + 1;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newNote = {\n      content: note,\n      important: Math.random() > 0.5,\n      date: new Date(),\n      id: generateNoteId()\n    };\n\n    axios\n      .post(\"http://localhost:3001/notes\", newNote)\n      .then(res => console.log(res));\n    // add to state\n    setNotes(notes.concat(newNote));\n  };\n\n  const showImportant = () => {\n    // only important notes displayed showAll is false. toggled by button\n    setShowAll(!showAll);\n  };\n\n  const toggleImportant = id => {\n    // find note by id\n    const note = notes.find(note => note.id === +id);\n    // mod importance\n    const modNote = { ...note, important: !note.important };\n    // repost to db\n\n    // console.log(note);\n    // console.log(modNote);\n    axios.put(`http://localhost:3001/notes/${id}`, modNote).then(res => {\n      // insert modded note into state\n      console.log(res.data);\n      setNotes(notes.map(note => (note.id === +id ? res.data : note)));\n    });\n  };\n\n  const generalRender = noteArr =>\n    noteArr.map(({ content, id, date, important }) => (\n      <Note\n        key={id}\n        content={content}\n        date={date}\n        important={important}\n        toggleImportant={toggleImportant}\n        id={id}\n      />\n    ));\n\n  return (\n    <div className=\"App\">\n      <h1>Notes</h1>\n      <button onClick={showImportant}>\n        {showAll ? \"Click to Show only important\" : \"Click to Show All\"}\n      </button>\n      <form onSubmit={handleSubmit}>\n        <input onChange={handleTextInput} type=\"text\" value={note} />\n        <input type=\"submit\" />\n      </form>\n      <ul>{showAll ? generalRender(notes) : generalRender(importantNotes)}</ul>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}