{"ast":null,"code":"import _slicedToArray from \"/home/newdevrising/dev/tutorials/fullstack-helsinki/part2/notes-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/newdevrising/dev/tutorials/fullstack-helsinki/part2/notes-app/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Note from \"./components/Note\";\n\nconst App = props => {\n  const _useState = useState(props.notes),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        showAll = _useState4[0],\n        setShowAll = _useState4[1];\n\n  const importantNotes = notes.filter(note => note.important);\n\n  const _useState5 = useState(\"add note\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        note = _useState6[0],\n        setNote = _useState6[1];\n\n  useEffect(() => {\n    console.log(\"useEffect triggered this\");\n  }, []);\n\n  const handleTextInput = e => {\n    setNote(e.target.value);\n  };\n\n  const generateNoteId = () => {\n    // insures unique ID by adding one to highest existing\n    return Math.max(...notes.map(note => note.id)) + 1;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newNote = {\n      content: note,\n      important: Math.random() > 0.5,\n      date: new Date(),\n      id: generateNoteId()\n    };\n    setNotes(notes.concat(newNote));\n  };\n\n  const toggleImportant = () => {\n    // only important notes displayed showAll is false. toggled by button\n    setShowAll(!showAll);\n  };\n\n  const generalRender = noteArr => noteArr.map(({\n    content,\n    id,\n    date,\n    important\n  }) => React.createElement(Note, {\n    key: id,\n    content: content,\n    date: date,\n    important: important,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"button\", {\n    onClick: toggleImportant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, showAll ? \"Click to Show only important\" : \"Click to Show All\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onChange: handleTextInput,\n    type: \"text\",\n    value: note,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, showAll ? generalRender(notes) : generalRender(importantNotes)));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/newdevrising/dev/tutorials/fullstack-helsinki/part2/notes-app/src/App.js"],"names":["React","useState","useEffect","axios","Note","App","props","notes","setNotes","showAll","setShowAll","importantNotes","filter","note","important","setNote","console","log","handleTextInput","e","target","value","generateNoteId","Math","max","map","id","handleSubmit","preventDefault","newNote","content","random","date","Date","concat","toggleImportant","generalRender","noteArr"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Note from \"./components/Note\";\n\nconst App = props => {\n  const [notes, setNotes] = useState(props.notes);\n  const [showAll, setShowAll] = useState(true);\n\n  const importantNotes = notes.filter(note => note.important);\n\n  const [note, setNote] = useState(\"add note\");\n\n  useEffect(() => {\n    console.log(\"useEffect triggered this\");\n  }, []);\n\n  const handleTextInput = e => {\n    setNote(e.target.value);\n  };\n\n  const generateNoteId = () => {\n    // insures unique ID by adding one to highest existing\n    return Math.max(...notes.map(note => note.id)) + 1;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newNote = {\n      content: note,\n      important: Math.random() > 0.5,\n      date: new Date(),\n      id: generateNoteId()\n    };\n\n    setNotes(notes.concat(newNote));\n  };\n\n  const toggleImportant = () => {\n    // only important notes displayed showAll is false. toggled by button\n    setShowAll(!showAll);\n  };\n\n  const generalRender = noteArr =>\n    noteArr.map(({ content, id, date, important }) => (\n      <Note key={id} content={content} date={date} important={important} />\n    ));\n\n  return (\n    <div className=\"App\">\n      <h1>Notes</h1>\n      <button onClick={toggleImportant}>\n        {showAll ? \"Click to Show only important\" : \"Click to Show All\"}\n      </button>\n      <form onSubmit={handleSubmit}>\n        <input onChange={handleTextInput} type=\"text\" value={note} />\n        <input type=\"submit\" />\n      </form>\n      <ul>{showAll ? generalRender(notes) : generalRender(importantNotes)}</ul>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}